{"version":3,"sources":["Mock.server.js","components/atoms/Button/Button.js","components/atoms/Card/Card.js","components/atoms/Heading/Heading.js","components/atoms/Text/Text.js","components/patterns/ProductListItem/ProductListItem.js","constants/api.js","components/patterns/ProductList/ProductList.js","screens/Cart/Cart.js","screens/Products/Products.js","screens/UserProfile/UserProfile.js","components/patterns/Navigation/Navigation.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["productData","id","name","price","imageUrl","Server","routes","this","namespace","get","data","memberSince","recentOrders","orderId","Button","onClick","children","props","Card","highlight","className","Heading","Text","ProductListItem","onAddToCart","isSoldOut","isOnSale","buttonText","isInCart","src","alt","disabled","statusTypes","Loading","Error","message","listTypes","ProductList","status","listType","map","item","key","Cart","useState","cartState","setCartState","useEffect","a","fetch","cartFetch","json","cartResponse","console","error","getData","Products","productState","setProductState","productFetch","productResponse","UserProfile","undefined","user","setUser","userResponse","level","order","Navigation","to","Routes","path","component","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0da6d735.chunk.js","sourcesContent":["import { Server } from \"miragejs\";\n\nconst productData = [\n  {\n    id: 1,\n    name: \"Mocha\",\n    price: 3.5,\n    imageUrl: \"https://source.unsplash.com/tNALoIZhqVM/200x100/\",\n  },\n  {\n    id: 2,\n    name: \"Latte\",\n    price: 3.5,\n    imageUrl: \"https://source.unsplash.com/tNALoIZhqVM/200x100/\",\n  },\n  {\n    id: 3,\n    name: \"Vanilla Latte\",\n    price: 3.5,\n    imageUrl: \"https://source.unsplash.com/tNALoIZhqVM/200x100/\",\n  },\n];\n\nconst server = new Server({\n  routes() {\n    this.namespace = \"/api\";\n    this.get(\"/cart\", () => ({ data: [productData[1]] }));\n    this.get(\"/products\", () => ({ data: productData }));\n    this.get(\"/profile\", () => ({\n        name: \"Saige McDermott\",\n        memberSince: \"June 12th, 2018\",\n        recentOrders: [\n          { orderId: 12, name: \"Latte\" },\n          { orderId: 27, name: \"Cafe Miel\" },\n        ],\n    }));\n\n    this.get(\"/users\", () => [\n      { id: \"1\", name: \"Luke\" },\n      { id: \"2\", name: \"Leia\" },\n      { id: \"3\", name: \"Anakin\" },\n    ]);\n  },\n});\n\nexport default server;\n","import React from \"react\";\n\nexport default function Button({ onClick, children, ...props }) {\n  return <button onClick={onClick} {...props}>{children}</button>;\n}\n","import React from \"react\";\nimport \"./Card.css\";\n\nexport default function Card({ children, highlight }) {\n  return <div className=\"card\">{children}</div>;\n}\n","import React from \"react\";\n\nexport default function Heading({ children }) {\n  return <h2>{children}</h2>;\n}\n","import React from \"react\";\n\nexport default function Text({ children }) {\n  return <span>{children}</span>;\n}\n","import React from \"react\";\nimport \"./ProductListItem.css\";\n\nimport Button from \"../../atoms/Button\";\nimport Card from \"../../atoms/Card\";\nimport Heading from \"../../atoms/Heading\";\nimport Text from \"../../atoms/Text\";\n\nexport default function ProductListItem({\n  name,\n  price,\n  imageUrl,\n  onAddToCart,\n  isSoldOut,\n  isOnSale,\n  isInCart\n}) {\n  let buttonText = \"Add to Cart\";\n\n  if(isSoldOut) {\n    buttonText = \"Sold out\"\n  }\n\n  if(isInCart) {\n    buttonText = \"Remove from Cart\"\n  }\n\n  return (\n    <Card highlight={isOnSale}>\n      <Heading>\n        {name} {isOnSale && <span>(On Sale)</span>}\n      </Heading>\n      <img src={imageUrl} alt=\"\" />\n      <Text>{price}</Text>\n      <Button onClick={onAddToCart} disabled={isSoldOut}>\n        {buttonText}\n      </Button>\n    </Card>\n  );\n}\n","export const statusTypes = {\n  loading: \"loading\",\n  errored: \"errored\",\n  loaded: \"loaded\",\n};\n","import React from \"react\";\nimport ProductListItem from \"../ProductListItem\";\nimport { statusTypes } from '../../../constants/api'\n// This is a simple loading component that we'll want to switch out later\nconst Loading = () => <span>Loading</span>;\nconst Error = ({ message }) => <span>An error has occurred! {message}</span>;\n\n\nexport const listTypes = {\n  productList: 'productList',\n  cart: 'cart'\n}\nexport default function ProductList({ status, data, onAddToCart, listType }) {\n  if (status === statusTypes.loading) {\n    return <Loading />;\n  }\n\n  if (status === statusTypes.errored) {\n    return <Error message=\"Failed to load data\" />;\n  }\n\n  return data.map((item) => (\n    <ProductListItem\n      key={item.id}\n      name={item.name}\n      price={item.price}\n      isInCart={listType === listTypes.cart}\n      onAddToCart={() => {\n        onAddToCart(item.id);\n      }}\n      imageUrl={item.imageUrl}\n    />\n  ));\n}\n\nProductList.defaultProps = {\n  status: statusTypes.loading,\n};\n","import React, { useEffect, useState } from 'react';\nimport ProductList  from '../../components/patterns/ProductList';\nimport { statusTypes } from '../../constants/api'\n\nimport Heading from '../../components/atoms/Heading';\n\nexport default function Cart() {\n  const [ cartState, setCartState ] = useState({ \n    data: [], \n    status: statusTypes.loading \n  });\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const cartFetch = await fetch('/api/cart/');\n        const cartResponse = await cartFetch.json();\n        setCartState({ data: cartResponse.data, status: statusTypes.loaded })\n      } catch (ex) {\n        console.error(ex);\n        setCartState({ data: [], status: statusTypes.errored })\n      }\n    }\n\n    getData();\n  }, []);\n\n\n  return <>\n  <Heading>Cart</Heading> \n  <ProductList\n    listType=\"cart\"\n    data={cartState.data}\n    status={cartState.status}\n  />\n  </>\n}","import React, { useEffect, useState } from 'react';\nimport ProductList  from '../../components/patterns/ProductList';\nimport { statusTypes } from '../../constants/api'\n\n\nexport default function Products() {\n  const [ productState, setProductState ] = useState({ \n    data: [], \n    status: statusTypes.loading \n  });\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const productFetch = await fetch('/api/products');\n        const userFetch = await fetch('/api/users')\n        const productResponse = await productFetch.json();\n\n        setProductState({ data: productResponse.data, status: statusTypes.loaded })\n      } catch (ex) {\n        console.error(ex);\n        setProductState({ data: [], status: statusTypes.errored })\n      }\n    }\n\n    getData();\n  }, []);\n  return <ProductList\n    data={productState.data}\n    status={productState.status}\n  />\n}","import React, { useState, useEffect } from 'react';\nimport Card from '../../components/atoms/Card';\nimport Heading from '../../components/atoms/Heading';\nimport Text from '../../components/atoms/Text';\n\nimport { statusTypes } from '../../constants/api'\n\n\nexport default function UserProfile() {\n  const [ user, setUser ] = useState({ \n    data: undefined, \n    status: statusTypes.loading \n  });\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const cartFetch = await fetch('/api/profile/');\n        const userResponse = await cartFetch.json();\n        setUser({ data: userResponse, status: statusTypes.loaded })\n      } catch (ex) {\n        console.error(ex);\n        setUser({ data: undefined, status: statusTypes.errored })\n      }\n    }\n\n    getData();\n  }, []);\n\n  if(!user.data) { return null }\n\n  return (\n    <Card>\n      <Heading level={2}>{user.data.name}</Heading>\n      <Text>{user.data.memberSince}</Text>\n      <Heading level={3}>\n        Recent Orders\n        <ul>\n          {user.data.recentOrders.map(order => <li key={order.id}>{order.name}</li>)}\n        </ul>\n      </Heading>\n    </Card>\n  )\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navigation() {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Products</Link>\n        </li>\n        <li>\n          <Link to=\"/cart\">Cart</Link>\n        </li>\n        <li>\n          <Link to=\"/userProfile\">Profile</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport Cart from \"./screens/Cart\";\nimport Products from \"./screens/Products\";\nimport UserProfile from \"./screens/UserProfile\";\nimport Navigation from \"./components/patterns/Navigation/Navigation\";\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <Navigation />\n      <Switch>\n        <Route path=\"/cart\" component={Cart} />\n        <Route path=\"/userProfile\" component={UserProfile} />\n        <Route path=\"/\" component={Products} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import React from \"react\";\nimport './Mock.server'\nimport Routes from './Routes';\n\nfunction App() {\n  return (\n    <Routes />\n );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./theme.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}